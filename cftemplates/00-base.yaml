Description: >
    This template deploys an ECS cluster to the provided VPC and subnets 
    using an Auto Scaling Group
Parameters: 
    DNSHostedZone:
        Type: String
        Default: example.com
        Description: Enter the DNS name used by these applications for creating a Route53 Hosted Zone
    ValidationDomain:
        Type: String
        Default: example.com
        Description: Enter the DNS name used to validate domain ownership for ACM
    EnvironmentName:
        Description: An environment name that will be prefixed to some resource names and outputs
        Default: DockerMeetup
        Type: String
    CidrBlock:
        Type: "String"
        Description: "The CIDR to create the VPC under."
        Default: "10.0.0.0/16"
        MaxLength: "18"
        MinLength: "9"
        AllowedPattern: "(\\d{1,3}\\.){3}\\d{1,3}\\/\\d{1,2}"
        ConstraintDescription: "Must be a valid CIDR block in the form x.x.x.x/x"
    PublicSubnetACidr:
        Type: "String"
        Description: "The CIDR to create the public subnet under. Must be a subnetwork of CidrBlock"
        Default: "10.0.2.0/23"
        MaxLength: "18"
        MinLength: "9"
        AllowedPattern: "(\\d{1,3}\\.){3}\\d{1,3}\\/\\d{1,2}"
        ConstraintDescription: "Must be a valid CIDR block in the form x.x.x.x/x"
    PublicSubnetBCidr:
        Type: "String"
        Description: "The CIDR to create the public subnet under. Must be a subnetwork of CidrBlock"
        Default: "10.0.4.0/23"
        MaxLength: "18"
        MinLength: "9"
        AllowedPattern: "(\\d{1,3}\\.){3}\\d{1,3}\\/\\d{1,2}"
        ConstraintDescription: "Must be a valid CIDR block in the form x.x.x.x/x"
    KeyPayload:
        Type: "String"
        Description: "The key payload to create a keypair"

Resources:
    # Request the ACM Certifcate
    ACMCert:
        Type: AWS::CertificateManager::Certificate
        Properties:
            DomainName: !Ref DNSHostedZone
            DomainValidationOptions:
              - DomainName: !Ref DNSHostedZone
                ValidationDomain: !Ref ValidationDomain

    # S3 Bucket for us to upload the template stages too
    S3Bucket:
        Type: AWS::S3::Bucket

    # IAM Role and Instance Profile for the EC2 Instances
    ECSEC2Role:
        Type: AWS::IAM::Role
        Properties: 
            Path: /
            AssumeRolePolicyDocument:
                Statement:
                  - Action: "sts:AssumeRole"
                    Effect: Allow
                    Principal:
                        Service: "ec2.amazonaws.com"
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"

    ECSEC2InstanceProfile: 
        Type: AWS::IAM::InstanceProfile
        Properties:
          Path: /
          Roles:
              - !Ref ECSEC2Role

    # Repo for the game
    ECRAlien:
        Type: AWS::ECR::Repository
        Properties:
            RepositoryName: meetup-alien

    # Repo for the post score API
    ECRPscore:
        Type: AWS::ECR::Repository
        Properties:
            RepositoryName: meetup-pscore

    # Repo for the high scores page
    ECRScores:
        Type: AWS::ECR::Repository
        Properties:
            RepositoryName: meetup-scores

    # Repo for the credits page
    ECRCredits:
        Type: AWS::ECR::Repository
        Properties:
            RepositoryName: meetup-credits

    # Repo for the redirect page
    ECRRedirect:
        Type: AWS::ECR::Repository
        Properties:
            RepositoryName: meetup-redirect

    # DNS Zone to place the ALB under
    DNSZone:
        Type: "AWS::Route53::HostedZone"
        Properties:
            HostedZoneConfig:
                Comment: "DNS used to point to the applications"
            Name: !Ref DNSHostedZone

    # Dynamo DB for the Scores to put in
    DDBScores:
        Type: "AWS::DynamoDB::Table"
        Properties: 
            AttributeDefinitions:
              - AttributeName: "id"
                AttributeType: "S"
            KeySchema:
              - AttributeName: "id"
                KeyType: "HASH"
            ProvisionedThroughput:
                ReadCapacityUnits: "5"
                WriteCapacityUnits: "20"

    # VPC and Subnet Creation. Relies on https://github.com/NightKhaos/vpc-ipv6-cfn
    VPC:
        Type: "AWS::EC2::VPC"
        Properties:
            CidrBlock: !Ref CidrBlock
            EnableDnsSupport: "true"
            EnableDnsHostnames: "true"
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName}-VPC

    VPCIpv6:
        Type: "AWS::EC2::VPCCidrBlock"
        Properties:
            AmazonProvidedIpv6CidrBlock: true
            VpcId: !Ref VPC

    VPCIpv6Prefix:
        Type: "Custom::VPCCidrBlockPrefix"
        Properties:
            ServiceToken:
                "Fn::ImportValue": !Sub vpc-ipv6-cfn-${AWS::Region}
            VpcAssociationId: !Ref VPCIpv6

    IGW:
        Type: "AWS::EC2::InternetGateway"

    GatewayAttachment:
        Type: "AWS::EC2::VPCGatewayAttachment"
        Properties:
            InternetGatewayId: !Ref IGW
            VpcId: !Ref VPC

    PublicRouteTable:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref VPC

    PublicDefaultRoute:
        Type: "AWS::EC2::Route"
        DependsOn: GatewayAttachment
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: "0.0.0.0/0"
            GatewayId: !Ref IGW

    PublicDefaultIpv6Route:
        Type: "AWS::EC2::Route"
        DependsOn:
          - GatewayAttachment
          - VPCIpv6
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationIpv6CidrBlock: "::/0"
            GatewayId: !Ref IGW

    PublicSubnetA:
        Type: "AWS::EC2::Subnet"
        DependsOn: PublicDefaultRoute
        Properties:
            AvailabilityZone: !Select [ 0, !GetAZs '']
            CidrBlock: !Ref PublicSubnetACidr
            MapPublicIpOnLaunch: "true"
            VpcId: !Ref VPC

    PublicSubnetAIpv6:
        Type: "AWS::EC2::SubnetCidrBlock"
        DependsOn: PublicDefaultIpv6Route
        Properties:
            Ipv6CidrBlock:
                "Fn::Join":
                    - ''
                    - - !GetAtt [VPCIpv6Prefix, TruncatedPrefix]
                      - "0a"
                      - "::/64"
            SubnetId: !Ref PublicSubnetA

    PublicSubnetAIpv6OnCreation:
        Type: "Custom::SubnetModifyAssociateIpv6AddressOnCreation"
        DependsOn: PublicSubnetAIpv6
        Properties:
            ServiceToken:
                "Fn::ImportValue": !Sub vpc-ipv6-cfn-${AWS::Region}
            SubnetId: !Ref PublicSubnetA
            AssignIpv6AddressOnCreation: True

    PublicSubnetB:
        Type: "AWS::EC2::Subnet"
        DependsOn: PublicDefaultRoute
        Properties:
            AvailabilityZone: !Select [ 1, !GetAZs '']
            CidrBlock: !Ref PublicSubnetBCidr
            MapPublicIpOnLaunch: "true"
            VpcId: !Ref VPC

    PublicSubnetBIpv6:
        Type: "AWS::EC2::SubnetCidrBlock"
        DependsOn: PublicDefaultIpv6Route
        Properties:
            Ipv6CidrBlock:
                "Fn::Join":
                    - ''
                    - - !GetAtt [VPCIpv6Prefix, TruncatedPrefix]
                      - "0b"
                      - "::/64"
            SubnetId: !Ref PublicSubnetB

    PublicSubnetBIpv6OnCreation:
        Type: "Custom::SubnetModifyAssociateIpv6AddressOnCreation"
        DependsOn: PublicSubnetBIpv6
        Properties:
            ServiceToken:
                "Fn::ImportValue": !Sub vpc-ipv6-cfn-${AWS::Region}
            SubnetId: !Ref PublicSubnetB
            AssignIpv6AddressOnCreation: True

    PublicSubnetARouteTable:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        DependsOn: 
          - PublicDefaultRoute
          - PublicDefaultIpv6Route
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnetA

    PublicSubnetBRouteTable:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        DependsOn:
          - PublicDefaultRoute
          - PublicDefaultIpv6Route
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnetB

    # Create an SSH KeyPair
    LambdaFunctionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Effect: Allow
                    Action:
                      - sts:AssumeRole
                    Principal:
                        Service:
                          - lambda.amazonaws.com


    LambdaFunctionPolicy:
        Type: AWS::IAM::Policy
        Properties:
            Roles:
              - !Ref LambdaFunctionRole
            PolicyName: ImportKeyPair
            PolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Action:
                      - logs:CreateLogGroup
                      - logs:CreateLogStream
                      - logs:PutLogEvents
                    Effect: Allow
                    Resource: "arn:aws:logs:*:*:*"
                  - Action:
                      - ec2:ImportKeyPair
                      - ec2:CreateKeyPair
                      - ec2:DeleteKeyPair
                    Effect: Allow
                    Resource: "*"


    LambdaFunction:
        Type: AWS::Lambda::Function
        DependsOn: LambdaFunctionPolicy
        Properties:
            Runtime: python2.7
            Code:
                ZipFile: !Sub |
                    import cfnresponse
                    import boto3
                    import uuid
                    def handler(event, context):
                        payload = event['ResourceProperties']['KeyPayload']
                        client = boto3.client('ec2','${AWS::Region}')
                        keyname = uuid.uuid4().hex
                        if event['RequestType'] == 'Delete':
                            response = client.delete_key_pair(KeyName=event['PhysicalResourceId'])
                            cfnresponse.send(event,context,cfnresponse.SUCCESS, {'Key':'Value'}, event['PhysicalResourceId'])
                        else:
                            response = client.import_key_pair(KeyName=keyname,PublicKeyMaterial=payload)
                            cfnresponse.send(event,context,cfnresponse.SUCCESS, {'KeyName':keyname},keyname)
            Description: Imports a KeyPair
            Handler: index.handler
            MemorySize: 256
            Role: !GetAtt LambdaFunctionRole.Arn
            Timeout: 300

    KeyPair:
        Type: Custom::KeyPair
        Properties:
            ServiceToken: !GetAtt LambdaFunction.Arn
            KeyPayload: !Ref KeyPayload


Outputs:
    S3Bucket:
        Value: !Ref S3Bucket
        Description: Name of the Amazon S3 bucket where templates will be stored
        Export:
            Name: !Sub ${EnvironmentName}-S3Bucket
    DDBScores:
        Value: !Ref DDBScores
        Description: Name of DynamoDB Table to be used for Scores
        Export:
            Name: !Sub ${EnvironmentName}-DDBScores
    ECSInstanceProfile:
        Value: !GetAtt ECSEC2InstanceProfile.Arn
        Description: Profile used by ECS instances
        Export:
            Name: !Sub ${EnvironmentName}-ECSInstanceProfile
    HostedZoneId:
        Value: !Ref DNSZone
        Description: The hosted zone ID to be used to create DNS records
        Export:
            Name: !Sub ${EnvironmentName}-HostedZoneId
    HostedZoneName:
        Value: !Ref DNSHostedZone
        Description: The hosted zone name to be used to create DNS records
        Export:
            Name: !Sub ${EnvironmentName}-HostedZoneName
    ECRAlien:
        Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRAlien}
        Description: The ECR URL for the Alien Repo
        Export:
            Name: !Sub ${EnvironmentName}-ECRAlien
    ECRPscore:
        Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRPscore}
        Description: The ECR URL for the PScore repo
        Export:
            Name: !Sub ${EnvironmentName}-ECRPscore
    ECRScores:
        Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRScores}
        Description: The ECR URL for the Scores Repo
        Export:
            Name: !Sub ${EnvironmentName}-ECRScores
    ECRCredits:
        Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRCredits}
        Description: The ECR URL for the Credits Repo
        Export:
            Name: !Sub ${EnvironmentName}-ECRCredits
    ECRRedirect:
        Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRedirect}
        Description: The ECR URL for the Redirect Container
        Export:
            Name: !Sub ${EnvironmentName}-ECRRedirect
    VpcId:
        Value: !Ref VPC
        Description: The VPC that was created in the template
        Export:
            Name: !Sub ${EnvironmentName}-VpcId
    Subnets:
        Value: !Join [ ",", [ !Ref PublicSubnetA, !Ref PublicSubnetB ]]
        Description: The subnets that were created in the template
        Export:
            Name: !Sub ${EnvironmentName}-Subnets
    ACMCert:
        Value: !Ref ACMCert
        Description: The ARN of the ACMCert we will use for the Load Balancer
        Export:
            Name: !Sub ${EnvironmentName}-Cert
    KeyPair:
        Value: !GetAtt KeyPair.KeyName
        Description: Name of the EC2 KeyPair
        Export:
            Name: !Sub ${EnvironmentName}-Key

